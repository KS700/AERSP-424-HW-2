From Question 3, what issues you might obtain during the development of
the program? What issues do you think will happen if some of the actions,
e.g., waking up the ATC, checking the traffic pattern, entering the traffic
pattern, diverging to another airport, etc., take time to finish? And what
will be a potential solution for the issues?

I dealt with a lot of concurrency issues as all of the different aircrafts (threads) in my code all shared the same resource (AirTrafficController). This can cause race conditions or other unwanted behaviors to occurs. To prevent this I used mutex in my code to make sure proper sychronization was used while the shared resource was being modified. Another issue that could happen with some of the actions used in this code would be a deadlock scenario. I experienced a deadlock scenario with the last aircraft in my code as it would never be released and allow the program to move on. To prevent this I had to include checks that ensured every thread was loacked at the same point in the code and that each thread was unlocked in the reverse order so not thread got stuck. Another issue that could happen is thread starvation where some threads are given priority and others never get a chance to execute. This was prevented by allowing 2 ending conditions (landing and diverting). This ensured the landing threads were not given full priority by allowing the diverting threads to end and not be forced to wait a long time to land.