From Question 3, what issues you might obtain during the development of
the program? What issues do you think will happen if some of the actions,
e.g., waking up the ATC, checking the traffic pattern, entering the traffic
pattern, diverging to another airport, etc., take time to finish? And what
will be a potential solution for the issues?

There were lots of issues I faced like concurrency issues, deadlocks, and thread starvation. Because all the threads are sharing the same resource (AirTrafficController) there were a lot of race conditons of different threads trying to go first. This was addressed by using mutex to ensure multiple threads can't modify the shared resource at the same time. I had a deadlock happen where the last aircraft would never land. This was addressed by making sure that threads were locked at the same point in the code and then later unlocked in the reverse order. Thread starvation could also occur if certain threads are given priority (like the first few aircraft that get to land while a majority of the others must divert to another airport). This was avoided by allowing for two final options to occur. Each aircraft either landed or got diverted. This allowed for the code to not prioritize any threads and instead allow each thread to go where specified.